Comandos para instalar dependencias en el front:

-pnpm install

Comandos para crear un proyecto con NEST:

-npm i -g @nestjs/cli
-nest new backend

Ya con eso estaría todo, si es necesario actualizar algo, usar el siguiente comando:

-pnpm install

Ahora, para configurar el proyecto para la BD, usar los siguientes comandos (crear y configurar un archivo .env tambien):

-pnpm add @nestjs/typeorm typeorm pg

-pnpm add -D @types/pg

Para poder habilitar la opcion de probar la API con swagger, se deben usar los siguientes comandos:

-pnpm add @nestjs/swagger swagger-ui-express

-pnpm add class-validator class-transformer

E ingresar a swagger con:

-http://localhost:3000/api/docs

Para levantar el servidor del backend, usar este comando:

-pnpm run start:dev

Y para levantar el servidor del frontend, usar el siguiente comando (cambiar el puerto):

-pnpm dev --port 3002

Implementar Electron (configurar el package.json con las nuevas dependencias):

-pnpm add -D electron @types/electron concurrently wait-on
-pnpm electron-dev

-----------------------------API-----------------------------------
Test con jest y redis cache:
-pnpm add -D @faker-js/faker supertest @types/supertest
-pnpm add cache-manager@^5 @nestjs/cache-manager@^3 cache-manager-redis-yet ioredis

Comandos para ejecutar los test con jest y 2e2:

# Iniciar Redis

-pnpm redis:start

# Ejecutar todos los tests

pnpm test

# Ver cobertura

pnpm test:cov

# Tests en modo watch (mientras desarrollas)

pnpm test:watch

# Iniciar servidor con Redis

pnpm dev

------------------------Comandos para levantar el servidor---------------------------------:

# Iniciar Redis

-pnpm redis:start

# Iniciar el daemon de docker

-docker ps

# levantar el servidor de Nest

-pnpm run star:dev

------------------------------Verificación de Redis desde docker o PS--------------------------
-docker exec -it <contenedor_redis> redis-cli
-PINGa #Responderá PONG
-KEYS cache-stats:\* #Se verán las 2 claves
-TTL cache-stats:ping:... #segundos restantes (>0)
